/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC1363ReceiverMock,
  ERC1363ReceiverMockInterface,
} from "../../../../src/contracts/mocks/ERC1363ReceiverMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "retval",
        type: "bytes4",
      },
      {
        internalType: "bool",
        name: "reverts",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "gas",
        type: "uint256",
      },
    ],
    name: "Received",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onTransferReceived",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161098838038061098883398181016040528101906100329190610197565b6100647f6b9d67950bde0805e78c9abf5aa99b155e951a8df417aa7fb0ba2bc81051d17360001b61016a60201b60201c565b6100967f160d9eda78a9a48d8d7ded5484325b605b424fa38d5992ea009790aff45fb88f60001b61016a60201b60201c565b6100c87f89a44963f7853a367702c0b512ce538d8c7f9af94fe92a50cb0fba14346281da60001b61016a60201b60201c565b816000806101000a81548163ffffffff021916908360e01c02179055506101177fd41d9d9cefc52f9c0490814fac90a46771cf12837cf254324a16576ebfe7d3f160001b61016a60201b60201c565b6101497fa191f1b8d9ef41b288b73a83380ba2f49554fec94fc8f29c808ba77d7f33cdde60001b61016a60201b60201c565b80600060046101000a81548160ff0219169083151502179055505050610242565b50565b60008151905061017c81610214565b92915050565b6000815190506101918161022b565b92915050565b600080604083850312156101ae576101ad61020f565b5b60006101bc85828601610182565b92505060206101cd8582860161016d565b9150509250929050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600080fd5b61021d816101d7565b811461022857600080fd5b50565b610234816101e3565b811461023f57600080fd5b50565b610737806102516000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806388a7ca5c14610030575b600080fd5b61004a60048036038101906100459190610336565b610060565b60405161005791906104ab565b60405180910390f35b600061008e7f5efc4c5e3bdb06e0c34d9c6528fdb83f2d857571b4e61242fc39dfcd5dbcf1d960001b610299565b6100ba7f19d5a98e1e6fd727e09c4e68dd16c70ae9f4fb4ce9e23890fe6cde0c8eac43ba60001b610299565b6100e67f4343d474d1435a3d6c8285ec3371d5f8b004d59467076c96ca6f9241ed56656460001b610299565b6101127fe063e9b8b7d7654b98d6e10d97e36a12a0b1fb4e01c7a83991cb9d0d5834e36460001b610299565b600060049054906101000a900460ff1615610162576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610159906104c6565b60405180910390fd5b61018e7f839df451651addad767379e7f84eedc9f034af96f6147c7a691af5a4a67456e860001b610299565b6101ba7f0adeddfbf3a68c0c9a29e3c8b0dcef1164b6a6b972ee48cea2ac88368653d1b460001b610299565b6101e67f3fdede31196f1c44457f9bde096e1a77f525f08d002a7fa125e97d53347f2d6660001b610299565b7f28fa6e16458f9c24aa59ddd4085264573006dbe30304837873c7deafc702b03885858585633b9aca00604051610221959493929190610451565b60405180910390a16102557f149d5a4e793bfc26af293d335b4c97ebaeef6a5e5df1be4994a7bf93d2b947d860001b610299565b6102817f1503df305791922b0d1aca4d668cfef18d2b15cb1945b01e69534f2eaeef2baf60001b610299565b60008054906101000a900460e01b9050949350505050565b50565b60006102af6102aa8461050b565b6104e6565b9050828152602081018484840111156102cb576102ca61068a565b5b6102d68482856105e3565b509392505050565b6000813590506102ed816106d3565b92915050565b600082601f83011261030857610307610685565b5b813561031884826020860161029c565b91505092915050565b600081359050610330816106ea565b92915050565b600080600080608085870312156103505761034f610694565b5b600061035e878288016102de565b945050602061036f878288016102de565b935050604061038087828801610321565b925050606085013567ffffffffffffffff8111156103a1576103a061068f565b5b6103ad878288016102f3565b91505092959194509250565b6103c281610569565b82525050565b6103d18161057b565b82525050565b60006103e28261053c565b6103ec8185610547565b93506103fc8185602086016105f2565b61040581610699565b840191505092915050565b610419816105d1565b82525050565b600061042c601d83610558565b9150610437826106aa565b602082019050919050565b61044b816105c7565b82525050565b600060a08201905061046660008301886103b9565b61047360208301876103b9565b6104806040830186610442565b818103606083015261049281856103d7565b90506104a16080830184610410565b9695505050505050565b60006020820190506104c060008301846103c8565b92915050565b600060208201905081810360008301526104df8161041f565b9050919050565b60006104f0610501565b90506104fc8282610625565b919050565b6000604051905090565b600067ffffffffffffffff82111561052657610525610656565b5b61052f82610699565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610574826105a7565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006105dc826105c7565b9050919050565b82818337600083830152505050565b60005b838110156106105780820151818401526020810190506105f5565b8381111561061f576000848401525b50505050565b61062e82610699565b810181811067ffffffffffffffff8211171561064d5761064c610656565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433133363352656365697665724d6f636b3a207468726f77696e67000000600082015250565b6106dc81610569565b81146106e757600080fd5b50565b6106f3816105c7565b81146106fe57600080fd5b5056fea264697066735822122054bd122811c0a0431407e96010595c0fd83278c246832a86f435201c01f9fd7a64736f6c63430008070033";

type ERC1363ReceiverMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC1363ReceiverMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC1363ReceiverMock__factory extends ContractFactory {
  constructor(...args: ERC1363ReceiverMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    retval: BytesLike,
    reverts: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC1363ReceiverMock> {
    return super.deploy(
      retval,
      reverts,
      overrides || {}
    ) as Promise<ERC1363ReceiverMock>;
  }
  override getDeployTransaction(
    retval: BytesLike,
    reverts: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(retval, reverts, overrides || {});
  }
  override attach(address: string): ERC1363ReceiverMock {
    return super.attach(address) as ERC1363ReceiverMock;
  }
  override connect(signer: Signer): ERC1363ReceiverMock__factory {
    return super.connect(signer) as ERC1363ReceiverMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC1363ReceiverMockInterface {
    return new utils.Interface(_abi) as ERC1363ReceiverMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC1363ReceiverMock {
    return new Contract(address, _abi, signerOrProvider) as ERC1363ReceiverMock;
  }
}
