name: dapptools-tests

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
      - uses: cachix/install-nix-action@v13
      - uses: cachix/cachix-action@v10
        with:
          name: dapp

      - name: Install solc
        run: nix-env -f https://github.com/dapphub/dapptools/archive/master.tar.gz -iA solc-static-versions.solc_0_8_9

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Installing dependencies
        run: yarn install --frozen-lockfile

      - name: shell.nix
        run: echo -n -e 'let pkgs = import (builtins.fetchGit rec { name = "dapptools-${rev}"; url = https://github.com/dapphub/dapptools; rev = "d7a23096d8ae8391e740f6bdc4e8b9b703ca4764";  }) {}; in pkgs.mkShell { src = null; name = "tests"; buildInputs = with pkgs; [ pkgs.dapp ]; }' > shell.nix

      - name: Run tests
        run: nix-shell --run 'dapp test'
        # run: dapp test
        env:
          # Only fuzz deeply if we're pushing to main or this is a PR to main:
          DEEP_FUZZ: ${{ github.ref == 'refs/heads/main' || github.base_ref == 'main' }}
